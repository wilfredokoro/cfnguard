name: PR workflow handler

on:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-rules:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [dev, stg, prod]
    environment: ${{ matrix.env }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Install requirements
        run: pip install -r requirements.txt

    #   - name: Install cfn-guard
    #     run: |
    #         curl -sSL https://github.com/aws-cloudformation/cloudformation-guard/releases/download/2.1.1/cfn-guard-linux-2.1.1 -o cfn-guard
    #         chmod +x cfn-guard
    #         sudo mv cfn-guard /usr/local/bin/cfn-guard

      - name: Install cfn-guard
        shell: bash
        run: |
            set -e
            
            echo "üîç Fetching latest release..."
            LATEST_RELEASE=$(curl -s https://api.github.com/repos/aws-cloudformation/cloudformation-guard/releases/latest)
            
            # Use jq if available, otherwise fall back to grep
            if command -v jq &> /dev/null; then
                echo "üì¶ Using jq to parse release data..."
                DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | test("linux.*x86_64.*tar.gz")) | .browser_download_url')
            else
                echo "üì¶ Using grep to parse release data..."
                DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | grep -oP '"browser_download_url": "\K[^"]*linux.*x86_64.*\.tar\.gz[^"]*' | head -1)
            fi
            
            if [ -z "$DOWNLOAD_URL" ]; then
                echo "‚ùå Failed to find Linux download URL"
                echo "Available assets:"
                echo "$LATEST_RELEASE" | grep -oP '"name": "\K[^"]*' || echo "$LATEST_RELEASE"
                exit 1
            fi
            
            echo "‚úÖ Download URL: $DOWNLOAD_URL"
            
            echo "‚¨áÔ∏è Downloading cfn-guard..."
            curl -L "$DOWNLOAD_URL" -o cfn-guard.tar.gz
            
            echo "üì¶ Extracting archive..."
            tar -xzf cfn-guard.tar.gz
            
            echo "üöÄ Installing to /usr/local/bin/"
            # Handle different binary names across versions
            if [ -f "guard" ]; then
                sudo mv guard /usr/local/bin/cfn-guard
                sudo chmod +x /usr/local/bin/cfn-guard
            elif [ -f "cfn-guard" ]; then
                sudo mv cfn-guard /usr/local/bin/
                sudo chmod +x /usr/local/bin/cfn-guard
            else
                echo "‚ùå Could not find binary in archive"
                tar -tf cfn-guard.tar.gz
                exit 1
            fi
            
            echo "‚úÖ Installation complete!"
            echo "Installed version:"
            cfn-guard --version

      - name: Run cfn-guard tests
        run: python /home/runner/work/cfnguard/cfnguard/test.py

