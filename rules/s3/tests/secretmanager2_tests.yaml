- name: Secret rotates successfully, PASS
  input:
    Resources:
      MySecret:
        Type: AWS::SecretsManager::Secret
        Properties:
          RotationRules:
            AutomaticallyAfterDays: 30
        Metadata:
          RotationOccurringAsScheduled: true
  expectations:
    rules:
      SECRETS_ROTATE_SUCCESSFULLY: PASS


- name: Secret not rotating as scheduled, FAIL
  input:
    Resources:
      MySecret:
        Type: AWS::SecretsManager::Secret
        Properties:
          RotationRules:
            AutomaticallyAfterDays: 30
        Metadata:
          RotationOccurringAsScheduled: false
  expectations:
    rules:
      SECRETS_ROTATE_SUCCESSFULLY: FAIL

- name: Secret with no rotation rules, SKIP
  input:
    Resources:
      MySecret:
        Type: AWS::SecretsManager::Secret
        Properties:
          Description: "My secret"
  expectations:
    rules:
      SECRETS_ROTATE_SUCCESSFULLY: SKIP
- name: Secret with invalid rotation rules, FAIL  
  input:  
    Resources:
      MySecret:
        Type: AWS::SecretsManager::Secret
        Properties:
          RotationRules:
            AutomaticallyAfterDays: -1  # Invalid value
        Metadata:
          RotationOccurringAsScheduled: false
  expectations:
    rules:
      SECRETS_ROTATE_SUCCESSFULLY: FAIL
- name: Non-SecretsManager resource, SKIP
  input:
    Resources:
      MyLambdaFunction:
        Type: AWS::Lambda::Function
        Properties:
          Handler: "index.handler"
          Role: "arn:aws:iam::123456789012:role/LambdaRole"
          Runtime: "python3.9"
  expectations:
    rules:
      SECRETS_ROTATE_SUCCESSFULLY: SKIP
- name: Secret with missing RotationRules, FAIL   
  input:    
    Resources:
      MySecret:
        Type: AWS::SecretsManager::Secret
        Properties:   
        Description: "My secret"
        Metadata:
          RotationOccurringAsScheduled: false
  expectations:
    rules:
      SECRETS_ROTATE_SUCCESSFULLY: FAIL
- name: Secret with incorrect RotationRules type, FAIL  
  input:  
    Resources:
      MySecret:
        Type: AWS::SecretsManager::Secret
        Properties:
          RotationRules:
            AutomaticallyAfterDays: "30"  # String instead of integer
        Metadata:
          RotationOccurringAsScheduled: false
  expectations:
    rules:
      SECRETS_ROTATE_SUCCESSFULLY: FAIL